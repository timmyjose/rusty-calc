name: EAS / Release / Expo Update
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (for app.json). Eg: 1.1.7'
        required: false
        type: string
      android_build_version:
        description: 'Android VersionCode. Eg: 34'
        required: true
        type: string
      ios_build_version:
        description: 'iOS Build Number. Eg: 82'
        required: true
        type: string

jobs:
  build:
    name: Checkout and EAS Update
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: yarn
          cache-dependency-path: '**/yarn.lock'

      - name: Print branch name
        run: echo ${GITHUB_REF_NAME}

      - name: Install dependencies
        working-directory: app/packages/calc
        run: yarn install

      - name: Prepare (link) Android KV Backup Agent package
        working-directory: app/packages/android-kv-backup-agent
        run: yarn prepare

      - name: Setup Expo and EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Allow only PATCH variations in version (not MAJOR or MINOR)
        if: github.event.inputs.version
        working-directory: app/packages/calc
        run: |
          BRANCH_VERSION=$(echo ${GITHUB_REF_NAME} | sed -n 's/.*\/\(.*\)$/\1/p')
          MAJOR_MINOR=$(echo ${BRANCH_VERSION} | grep -oP '^\d+\.\d+')
          VERSION=${{ github.event.inputs.version }}
          
          if [[ ! "$VERSION" =~ ^${MAJOR_MINOR}\.[0-9]+$ ]]; then
            echo "Invalid version: $VERSION. Only ${MAJOR_MINOR}.X versions are allowed."
            exit 1
          fi

      - name: Update app.json if needed
        if: github.event.inputs.version
        working-directory: app/packages/calc
        run: |
          CURRENT_APP_JSON_VERSION=$(jq -r '.expo.version' app.json)
          VERSION=${{ github.event.inputs.version }}

          if [[ "${CURRENT_APP_JSON_VERSION}" != "${VERSION}" ]]; then
            echo "Detected a different app.json version..."
            jq --arg version "$VERSION" '.expo.version = $version' app.json > app.temp.json
            mv app.temp.json app.json
          else
            echo "app.json version is unchanged"
          fi

      - name: Print version in app.json
        working-directory: app/packages/calc
        run: |
          CURRENT_APP_JSON_VERSION=$(jq -r '.expo.version' app.json) 
          echo "Version in app.json = ${CURRENT_APP_JSON_VERSION}"

      - name: Perform eas update (workflow dispatch)
        working-directory: app/packages/calc
        run: eas update --channel=production --message="$(git log -1 --pretty=%B)"

      - name: Upload sourcemaps to Sentry
        working-directory: app/packages/calc
        env:
          SENTRY_URL: https://sentry.io
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          ANDROID_BUILD_VERSION: ${{ github.event.inputs.android_build_version }}
          IOS_BUILD_VERSION: ${{ github.event.inputs.ios_build_version }}
        run: |
          python3 scripts/update_sourcemaps.py "$ANDROID_BUILD_VERSION" "$IOS_BUILD_VERSION"

